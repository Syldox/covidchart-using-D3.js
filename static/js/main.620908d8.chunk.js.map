{"version":3,"sources":["Components/CovidChart.tsx","App.js","serviceWorker.js","index.js"],"names":["Countries","name","cases","CovidChart","dimensions","svgRef","useRef","useState","data","setData","x","scaleBand","domain","map","d","range","padding","y","scaleLinear","max","selection","setSelection","useEffect","selectAll","enter","append","attr","bandwidth","transition","duration","delay","_","i","ease","easeElastic","select","current","rects","exit","remove","ref","width","height","className","type","onClick","dataToAdd","randomstring","generate","Math","round","random","length","slice","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.620908d8.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport { select, Selection } from 'd3-selection';\nimport { scaleLinear, scaleBand } from 'd3-scale';\nimport { max } from 'd3-array';\nimport 'd3-transition';\nimport { easeElastic } from 'd3-ease';\nimport randomstring from 'randomstring';\n\n// Will refactore the component which will allow us to pass the data via props for much cleaner code.\nlet Countries = [\n  {\n    name: 'UAE',\n    cases: 32,\n  },\n  {\n    name: 'USA',\n    cases: 67,\n  },\n  {\n    name: 'China',\n    cases: 81,\n  },\n  {\n    name: 'UK',\n    cases: 38,\n  },\n  {\n    name: 'Africa',\n    cases: 5,\n  },\n  {\n    name: 'Frace',\n    cases: 100,\n  },\n];\nconst CovidChart: React.FC = () => {\n  const dimensions = { width: 800, height: 500 };\n  const svgRef = useRef<SVGSVGElement | null>(null);\n  const [data, setData] = useState(Countries);\n  const [name, setName] = useState('');\n  const [unit, setUnit] = useState('');\n\n  let x = scaleBand()\n    .domain(data.map((d) => d.name))\n    .range([0, dimensions.width])\n    .padding(0.05);\n\n  let y = scaleLinear()\n    .domain([0, max(data, (d) => d.cases)!])\n    .range([dimensions.height, 0]);\n\n  const [selection, setSelection] = useState<null | Selection<\n    SVGSVGElement | null,\n    unknown,\n    null,\n    undefined\n  >>(null);\n\n  useEffect(() => {\n    if (!selection) {\n      setSelection(select(svgRef.current));\n    } else {\n      selection\n        .selectAll('rect')\n        .data(data)\n        .enter()\n        .append('rect')\n        .attr('x', (d) => x(d.name)!)\n        .attr('y', dimensions.height)\n        .attr('width', x.bandwidth)\n        .attr('fill', '#03fcfc')\n        .attr('height', 0)\n        /**\n         * Transitions work similar to CSS Transitions\n         * From an inital point, to the conlcuded point\n         * in which you set the duration, and the ease\n         * and a delay if you'd like\n         */\n        .transition()\n        .duration(700)\n        .delay((_, i) => i * 100)\n        .ease(easeElastic)\n        .attr('height', (d) => dimensions.height - y(d.cases))\n        .attr('y', (d) => y(d.cases));\n    }\n  }, [selection]);\n\n  useEffect(() => {\n    if (selection) {\n      x = scaleBand()\n        .domain(data.map((d) => d.name))\n        .range([0, dimensions.width])\n        .padding(0.05);\n      y = scaleLinear()\n        .domain([0, max(data, (d) => d.cases)!])\n        .range([dimensions.height, 0]);\n\n      const rects = selection.selectAll('rect').data(data);\n\n      rects\n        .exit()\n        .transition()\n        .ease(easeElastic)\n        .duration(400)\n        .attr('height', 0)\n        .attr('y', dimensions.height)\n        .remove();\n\n      /**\n       * a delay is added here to aid the transition\n       * of removing and adding elements\n       * otherwise, it will shift all elements\n       * before the add/remove transitions are finished\n       */\n      rects\n        .transition()\n        .delay(300)\n        .attr('x', (d) => x(d.name)!)\n        .attr('y', (d) => y(d.cases))\n        .attr('width', x.bandwidth)\n        .attr('height', (d) => dimensions.height - y(d.cases))\n        .attr('fill', 'red');\n\n      rects\n        .enter()\n        .append('rect')\n        .attr('x', (d) => x(d.name)!)\n        .attr('width', x.bandwidth)\n        .attr('height', 0)\n        .attr('y', dimensions.height)\n        .transition()\n        .delay(400)\n        .duration(500)\n        .ease(easeElastic)\n        .attr('height', (d) => dimensions.height - y(d.cases))\n        .attr('y', (d) => y(d.cases))\n        .attr('fill', 'orange');\n    }\n  }, [data]);\n\n  /**\n   * functions to help add and remove elements to show transitions\n   */\n  const addData = () => {\n    const dataToAdd = {\n      name: randomstring.generate(),\n      cases: Math.round(Math.random() * 80 + 20),\n    };\n    setData([...data, dataToAdd]);\n  };\n\n  const removeData = () => {\n    if (data.length === 0) {\n      return;\n    }\n    setData([...data.slice(0, data.length - 1)]);\n  };\n\n  return (\n    <>\n      <svg ref={svgRef} width={dimensions.width} height={dimensions.height} />\n      <div className=\"btn-group mt-4\">\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-info m-2\"\n          onClick={addData}\n        >\n          Add Data\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-danger\"\n          onClick={removeData}\n        >\n          Remove Data\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default CovidChart;\n","import React from 'react';\nimport './App.css';\nimport CovidChart from './Components/CovidChart';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Covid 19 - Chart</h1>\n        <CovidChart />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}